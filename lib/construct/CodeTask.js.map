{"version":3,"file":"CodeTask.js","sourceRoot":"","sources":["../../src/construct/CodeTask.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAqC;AACrC,4DAA8C;AAC9C,gEAAkD;AAElD,+DAA4D;AAyB5D;;GAEG;AACH,MAAa,QAAS,SAAQ,GAAG,CAAC,oBAAoB;IAIpD,YAAY,KAAoB,EAAE,EAAU,EAAE,KAAqB;QACjE,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAEjB,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,kBAC9C,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EACjC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,EACnC,OAAO,EAAE,eAAe,EACxB,UAAU,EAAE,GAAG,IACZ,KAAK,CAAC,aAAa,EACtB,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,EAAE;YACtD,SAAS,EAAE,MAAM;YACjB,OAAO,EAAE,IAAI,CAAC,cAAc;SAC7B,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,IAAI,yCAAmB,CAAC,IAAI,EAAE,EAAE,kBAC3C,cAAc,EAAE,SAAS,EACzB,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,eAAgB,CAAC,EACzD,mBAAmB,EAAE,IAAI,IACtB,KAAK,EACR,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC;YACZ,MAAM,EAAE,CAAC,6BAA6B,CAAC;SACxC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,QAAQ,CAAC,OAAuB,EAAE,KAAsB;QACtD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAtCD,4BAsCC","sourcesContent":["import * as cdk from '@aws-cdk/core';\r\nimport * as lambda from '@aws-cdk/aws-lambda';\r\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\r\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\r\nimport { ResilientLambdaTask } from './ResilientLambdaTask';\r\n\r\nexport namespace CodeTask {\r\n  /**\r\n   *  Based on `lambda.FunctionProps` where\r\n   *   * `code` is required;\r\n   *   * `handler`, `runtime` are excluded;\r\n   *   * other properties are optional.\r\n   */\r\n  export type FunctionProps = Pick<lambda.FunctionProps, 'code'> &\r\n    Partial<Omit<lambda.FunctionProps, 'runtime'>> &\r\n    Partial<Omit<lambda.FunctionProps, 'memorySize'>>;\r\n\r\n  export interface Props extends sfn.TaskStateBaseProps {\r\n    /**\r\n     * The payload that is used for the `InvokeFunction` task.\r\n     */\r\n    functionPayload?: { [key: string]: unknown };\r\n    /**\r\n     * The props that are passed to the Lambda function.\r\n     */\r\n    functionProps: FunctionProps;\r\n  }\r\n}\r\n\r\n/**\r\n * Class that represents a step function invoke function task.\r\n */\r\nexport class CodeTask extends sfn.StateMachineFragment {\r\n  public readonly startState: tasks.LambdaInvoke;\r\n  public readonly endStates: sfn.INextable[];\r\n\r\n  constructor(scope: cdk.Construct, id: string, props: CodeTask.Props) {\r\n    super(scope, id);\r\n\r\n    const func = new lambda.Function(this, 'Handler', {\r\n      timeout: cdk.Duration.minutes(15),\r\n      runtime: lambda.Runtime.NODEJS_12_X,\r\n      handler: 'index.handler',\r\n      memorySize: 512,\r\n      ...props.functionProps,\r\n    });\r\n\r\n    const funcAlias = new lambda.Alias(this, 'LambdaAlias', {\r\n      aliasName: 'live',\r\n      version: func.currentVersion,\r\n    });\r\n\r\n    const task = new ResilientLambdaTask(this, id, {\r\n      lambdaFunction: funcAlias,\r\n      payload: sfn.TaskInput.fromObject(props.functionPayload!),\r\n      payloadResponseOnly: true,\r\n      ...props,\r\n    });\r\n\r\n    task.addRetry({\r\n      errors: ['ServiceUnavailableException'],\r\n    });\r\n    this.startState = task;\r\n    this.endStates = [task];\r\n  }\r\n\r\n  addCatch(handler: sfn.IChainable, props?: sfn.CatchProps): this {\r\n    this.startState.addCatch(handler, props);\r\n    return this;\r\n  }\r\n}\r\n"]}