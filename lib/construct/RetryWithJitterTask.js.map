{"version":3,"file":"RetryWithJitterTask.js","sourceRoot":"","sources":["../../src/construct/RetryWithJitterTask.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAqC;AACrC,4DAA8C;AAC9C,gEAAkD;AAClD,+DAA2D;AAC3D,mCAAgC;AA8ChC;;GAEG;AACH,MAAa,mBAAoB,SAAQ,GAAG,CAAC,QAAQ;IAEnD,YAAY,KAAoB,EAAE,EAAU,EAAE,KAA2B;QACvE,MAAM,aAAa,GAAG;YACpB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,UAAU,EAAE,MAAM;YAClB,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,UAAU,EAAE;gBACV,cAAc,EAAE,qBAAqB;gBACrC,SAAS,EAAE,GAAG;aACf;SACF,CAAA;QAED,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;QAE/B,MAAM,qBAAqB,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,uBAAuB,EAAE;YAC/E,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU;YAClC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,sBAAsB,CAAC;YAC/D,OAAO,EAAE,qBAAqB;SAC/B,CAAC,CAAC;QAEH,MAAM,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,EAAE,aAAK,CAAC,eAAe,CAAC,KAAK,CAAC,eAAgB,EAAE,iBAAiB,CAAC,EAAE;YAE1H,cAAc,EAAE,qBAAqB;YACrC,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC;gBAChC,cAAc,EAAE,cAAc;gBAC9B,SAAS,EAAE,CAAC;aACb,CAAC;YACF,UAAU,EAAE,eAAe;SAC5B,CAAC,CAAA;QAEF,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,aAAK,CAAC,eAAe,CAAC,KAAK,CAAC,eAAgB,EAAE,oBAAoB,CAAC,EAAE;YACvG,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,eAAe,CAAC;SAChD,CAAC,CAAA;QAEF,2DAA2D;QAC3D,yFAAyF;QACzF,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,aAAK,CAAC,eAAe,CAAC,KAAK,CAAC,eAAgB,EAAE,cAAc,CAAC,EAAE;YACxG,UAAU,EAAE,SAAS;SACtB,CAAC,CAAA;QAEF,MAAM,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAE1E,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,aAAK,CAAC,eAAe,CAAC,KAAK,CAAC,eAAgB,EAAE,iBAAiB,CAAC,CAAC;aACvG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC;aACnE,SAAS,CAAC,eAAe,CAAC;aAC1B,UAAU,EAAE;aACZ,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;QAEzB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QAExB,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YACjC,WAAW,EAAE,KAAK,CAAC,UAAU,CAAC,WAAW;YACzC,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC,MAAM;SAChC,CAAC,CAAA;IACJ,CAAC;CACF;AA1DD,kDA0DC","sourcesContent":["import * as cdk from '@aws-cdk/core';\r\nimport * as lambda from '@aws-cdk/aws-lambda';\r\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\r\nimport { ResilientLambdaTask } from './ResilientLambdaTask'\r\nimport { Utils } from './utils';\r\n\r\n/**\r\n * Properties for defining a retry with backoff and jitter construct.\r\n */\r\nexport interface RetryWithJitterProps {\r\n  /**\r\n   * An optional description for this state\r\n   *\r\n   * @default No comment\r\n   */\r\n  readonly comment?: string;\r\n  /**\r\n   * JSONPath expression to select part of the state to be the input to this state.\r\n   *\r\n   * May also be the special value DISCARD, which will cause the effective\r\n   * input to be the empty object {}.\r\n   *\r\n   * @default $\r\n   */\r\n  readonly inputPath?: string;\r\n  /**\r\n   * JSONPath expression to indicate where to inject the state's output\r\n   *\r\n   * May also be the special value DISCARD, which will cause the state's\r\n   * input to become its output.\r\n   *\r\n   * @default $\r\n   */\r\n  readonly resultPath?: string;\r\n\r\n  /**\r\n   * Try chain to execute.\r\n   */\r\n  readonly tryProcess: sfn.IChainable;\r\n\r\n  /**\r\n   * Retry configuration.\r\n   */\r\n  readonly retryProps: sfn.RetryProps;\r\n  /**\r\n  * Optional State Name Prefix for the States, can be used if you observe the \"Invalid State Machine Definition: 'INVALID_STATE_NAME: Invalid State name: State exceeds the 80-character limit allowed by the service error when deploying.\r\n  */\r\n  readonly stateNamePrefix?: string\r\n}\r\n\r\n/**\r\n * Define a construct that implements retry with backoff and jitter.\r\n */\r\nexport class RetryWithJitterTask extends sfn.Parallel {\r\n\r\n  constructor(scope: cdk.Construct, id: string, props: RetryWithJitterProps) {\r\n    const parallelProps = {\r\n      comment: props.comment,\r\n      inputPath: props.inputPath,\r\n      outputPath: \"$[0]\",\r\n      resultPath: props.resultPath,\r\n      parameters: {\r\n        \"RetryCount.$\": \"$$.State.RetryCount\",\r\n        \"Input.$\": \"$\"\r\n      }\r\n    }\r\n\r\n    super(scope, id, parallelProps)\r\n\r\n    const calculateJitterLambda = new lambda.Function(this, 'CalculateJitterLambda', {\r\n      runtime: lambda.Runtime.PYTHON_3_8,\r\n      code: lambda.Code.fromAsset(__dirname + '/../../lambda/jitter'),\r\n      handler: \"main.lambda_handler\",\r\n    });\r\n\r\n    const calculateJitterTask = new ResilientLambdaTask(this, Utils.createStateName(props.stateNamePrefix!, \"CalculateJitter\"), {\r\n\r\n      lambdaFunction: calculateJitterLambda,\r\n      payload: sfn.TaskInput.fromObject({\r\n        \"RetryCount.$\": \"$.RetryCount\",\r\n        \"Backoff\": 2\r\n      }),\r\n      resultPath: \"$.WaitSeconds\",\r\n    })\r\n\r\n    const waitTask = new sfn.Wait(this, Utils.createStateName(props.stateNamePrefix!, \"WaitBetweenRetries\"), {\r\n      time: sfn.WaitTime.secondsPath(\"$.WaitSeconds\"),\r\n    })\r\n\r\n    // Need this state to \"unwrap\" original input to the state.\r\n    // Also, CDK does not support outputPath for Wait state, which I would use for retry path\r\n    const unwrapArguments = new sfn.Pass(this, Utils.createStateName(props.stateNamePrefix!, 'Unwrap Input'), {\r\n      outputPath: \"$.Input\"\r\n    })\r\n\r\n    const retryPath = calculateJitterTask.next(waitTask).next(unwrapArguments)\r\n\r\n    const choiceState = new sfn.Choice(this, Utils.createStateName(props.stateNamePrefix!, \"CheckRetryCount\"))\r\n      .when(sfn.Condition.numberGreaterThan(\"$.RetryCount\", 0), retryPath)\r\n      .otherwise(unwrapArguments)\r\n      .afterwards()\r\n      .next(props.tryProcess)\r\n\r\n    this.branch(choiceState)\r\n\r\n    this.addRetry({\r\n      interval: cdk.Duration.seconds(0),\r\n      maxAttempts: props.retryProps.maxAttempts,\r\n      errors: props.retryProps.errors\r\n    })\r\n  }\r\n}"]}