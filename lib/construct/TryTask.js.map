{"version":3,"file":"TryTask.js","sourceRoot":"","sources":["../../src/construct/TryTask.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,gEAAkD;AAClD,mCAAgC;AA6DhC;;GAEG;AACH,MAAa,OAAQ,SAAQ,GAAG,CAAC,QAAQ;IAEvC,YAAY,KAAoB,EAAE,EAAU,EAAE,KAAe;QAC3D,MAAM,aAAa,GAAG;YACpB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,UAAU,EAAE,MAAM;YAClB,UAAU,EAAE,KAAK,CAAC,UAAU;SACR,CAAA;QAEtB,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;QAE/B,IAAI,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC;QAE/B,IAAI,KAAK,CAAC,YAAY,EAAE;YACtB,OAAO,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAK,CAAC,eAAe,CAAC,KAAK,CAAC,eAAgB,EAAE,UAAU,CAAC,EAAE;gBAC1F,UAAU,EAAE,MAAM,CAAC,iDAAiD;aACrE,CAAC;iBACC,MAAM,CAAC,OAAO,CAAC;iBACf,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;SACnD;QAED,IAAI,KAAK,CAAC,cAAc,EAAE;YACxB,OAAO,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAK,CAAC,eAAe,CAAC,KAAK,CAAC,eAAgB,EAAE,YAAY,CAAC,EAAE;gBAC5F,UAAU,EAAE,MAAM,CAAC,iDAAiD;aACrE,CAAC;iBACC,MAAM,CAAC,OAAO,CAAC;iBACf,QAAQ,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC9B,UAAU,EAAE,KAAK,CAAC,gBAAgB;aACnC,CAAC;iBACD,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;CACF;AAnCD,0BAmCC","sourcesContent":["import * as cdk from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport { Utils } from './utils';\n\n/**\n * Properties for defining a try/catch/finally construct.\n */\nexport interface TryProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n  /**\n   * JSONPath expression to indicate where to inject the state's output\n   *\n   * May also be the special value DISCARD, which will cause the state's\n   * input to become its output.\n   *\n   * @default $\n   */\n  readonly resultPath?: string;\n\n  /**\n   * Try chain to execute.\n   */\n  readonly tryProcess: sfn.IChainable;\n\n  /**\n   * Catch properties.\n   */\n  readonly catchProps?: sfn.CatchProps; // provide catch-all default\n\n  /**\n   * Optional catch chain to execute.\n   */\n  readonly catchProcess?: sfn.IChainable;\n\n  /**\n   * JSONPath expression to indicate where to map caught exception details.\n   */\n  readonly finallyErrorPath?: string;\n\n  /**\n   * Optional finally chain to execute.\n   */\n  readonly finallyProcess?: sfn.IChainable;\n  /**\n   * Optional State Name Prefix for the States, can be used if you observe the \"Invalid State Machine Definition: 'INVALID_STATE_NAME: Invalid State name: State exceeds the 80-character limit allowed by the service error when deploying.\n   */\n  readonly stateNamePrefix?: string\n}\n\n/**\n * Define a construct that helps with handling StepFunctions exceptions.\n */\nexport class TryTask extends sfn.Parallel {\n\n  constructor(scope: cdk.Construct, id: string, props: TryProps) {\n    const parallelProps = {\n      comment: props.comment,\n      inputPath: props.inputPath,\n      outputPath: \"$[0]\",\n      resultPath: props.resultPath\n    } as sfn.ParallelProps\n\n    super(scope, id, parallelProps)\n\n    let process = props.tryProcess;\n\n    if (props.catchProcess) {\n      process = new sfn.Parallel(this, Utils.createStateName(props.stateNamePrefix!, 'TryCatch'), {\n        outputPath: \"$[0]\" // unwrap result from the first (and only) branch\n      })\n        .branch(process)\n        .addCatch(props.catchProcess, props.catchProps);\n    }\n\n    if (props.finallyProcess) {\n      process = new sfn.Parallel(this, Utils.createStateName(props.stateNamePrefix!, 'TryFinally'), {\n        outputPath: \"$[0]\" // unwrap result from the first (and only) branch\n      })\n        .branch(process)\n        .addCatch(props.finallyProcess, {\n          resultPath: props.finallyErrorPath\n        })\n        .next(props.finallyProcess);\n    }\n\n    this.branch(process);\n  }\n}"]}